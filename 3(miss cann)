def check(a):
  l=[]
  for i in a:
    if i[0][0]<0 or i[1][0]<0 or i[0][1]<0 or i[1][1]<0:
      continue
    elif i[0][0]==0 or i[1][0]==0 :
      l.append(i)
    elif i[0][0]>=i[0][1] and i[1][0]>=i[1][1]:
      l.append(i)

  return l


def generatechild(u):
  a=[]
  if u[0][2]==1:
    m=u[0][0]
    c=u[0][1]
    mr=u[1][0]
    cr=u[1][1]
    a.append([[m-1,c-1,0],[mr+1,cr+1,1]])
    a.append([[m-2,c,0],[mr+2,cr,1]])
    a.append([[m,c-2,0],[mr,cr+2,1]])
    a.append([[m,c-1,0],[mr,cr+1,1]])
    a.append([[m-1,c,0],[mr+1,cr,1]])

  if u[1][2]==1:
    m=u[1][0]
    c=u[1][1]
    mr=u[0][0]
    cr=u[0][1]
    a.append([[mr+1,cr+1,1],[m-1,c-1,0]])
    a.append([[mr+2,cr,1],[m-2,c,0]])
    a.append([[mr,cr+2,1],[m,c-2,0]])
    a.append([[mr+1,cr,1],[m-1,c,0]])
    a.append([[mr,cr+1,1],[m,c-1,0]])

  l=check(a)

  return l

def canni():
  visited=[]
  q=[]
  q1=[[0,0,0],[3,3,1]]
  i=[[3,3,1],[0,0,0]]
  u=i
  q.append(u)
  if(len(q)==0):
    return False
  if q1==u[0] :
    print("success")
  while(True):
         u=q.pop(-1)
         if(u==q1):
           print(visited)
           return visited
         visited.append(u)
         child=generatechild(u)
         for i in child:
           if i not in visited and i not in q:
             q.append(i)
             if(i==q1):
               print("success")
               #path(visited,i,q1)
               visited.append(i)
               print(visited)

               return True

canni()


Output:

success
[[[3, 3, 1], [0, 0, 0]], [[3, 2, 0], [0, 1, 1]], [[3, 1, 0], [0, 2, 1]], [[3, 2, 1], [0, 1, 0]], [[3, 0, 0], [0, 3, 1]], [[3, 1, 1], [0, 2, 0]], [[1, 1, 0], [2, 2, 1]], [[2, 2, 1], [1, 1, 0]], [[0, 2, 0], [3, 1, 1]], [[0, 3, 1], [3, 0, 0]], [[0, 1, 0], [3, 2, 1]], [[0, 2, 1], [3, 1, 0]], [[0, 0, 0], [3, 3, 1]]]
True
